#!/bin/sh
# kFreeBSD do not accept scripts as interpreters, using #!/bin/sh and sourcing.
if [ true != "$INIT_D_SCRIPT_SOURCED" ] ; then
    set "$0" "$@"; INIT_D_SCRIPT_SOURCED=true . /lib/init/init-d-script
fi
### BEGIN INIT INFO
# Provides:          hsqldb
# Required-Start:    $network
# Required-Stop:     $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: HSQLDB initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.  This example start a
#                    single forking daemon capable of writing a pid
#                    file.  To get other behavoirs, implemend
#                    do_start(), do_stop() or other functions to
#                    override the defaults in /lib/init/init-d-script.
#                    Register your script by update-rc.d hsqldb defaults
### END INIT INFO

# Author: MPLB <mplescano@>
#

USER=hsqldb
CURRENT_DIR=/opt/hsqldb/current
DIR=$CURRENT_DIR/data
NAME=hsqldb
DESC="HSQLDB Server"
DAEMON=none
CMD="/opt/ibm/iib-9.0.0.2/jre17/bin/java -classpath ${CURRENT_DIR}/lib/hsqldb.jar org.hsqldb.server.Server --remote_open true --props ${CURRENT_DIR}/data/server.properties"
stdout_log="/var/log/$NAME.log"
stderr_log="/var/log/$NAME.err"

get_pid() {
    cat "${PIDFILE}"
}

is_running() {
    [ -f "${PIDFILE}" ] && ps -p `get_pid` > /dev/null 2>&1
}

# Return
#   0 if daemon has been started
#   1 if daemon was already running
#   2 if daemon could not be started
do_start_cmd() {
    if is_running; then
        echo "It was already Running"
        return 1
    else
        cd "$DIR"
        if [ -z "$USER" ]; then
            sudo $CMD >> "$stdout_log" 2>> "$stderr_log" &
        else
            sudo -u "$USER" $CMD >> "$stdout_log" 2>> "$stderr_log" &
        fi
        echo $! > "${PIDFILE}"
        if ! is_running; then
            return 2
        fi
        return 0
    fi
}

# Return
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
do_stop_cmd() {
    if is_running; then
        kill -HUP `get_pid`
        for i in 1 2 3 4 5 6 7 8 9 10
        # for i in `seq 10`
        do
            if ! is_running; then
                break
            fi
            echo -n "."
            sleep 1
        done
        echo

        if is_running; then
            return 2
        else
            if [ -f "${PIDFILE}" ]; then
                rm -f "${PIDFILE}"
            fi
            return 0
        fi
    else
        if [ -f "${PIDFILE}" ]; then
            rm -f "${PIDFILE}"
        fi
        return 1
    fi
}

do_status() {
    if [ -f "${PIDFILE}" ]; then
        PID=`cat ${PIDFILE}`
        #ps axf
        if [ -z "`ps -p ${PID} | grep ${PID} | grep -v grep`" ]; then
            printf "%s\n" "Process dead but pidfile exists"
            return 1
        else
            echo "Running"
            return 0
        fi
    else
        echo "Stopped"
        return 1
    fi
}
