#!/bin/sh
# kFreeBSD do not accept scripts as interpreters, using #!/bin/sh and sourcing.
if [ true != "$INIT_D_SCRIPT_SOURCED" ] ; then
    set "$0" "$@"; INIT_D_SCRIPT_SOURCED=true . /lib/init/init-d-script
fi
### BEGIN INIT INFO
# Provides:          mq-server
# Required-Start:    $network rsyslog
# Required-Stop:     $network rsyslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: MQ initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.  This example start a
#                    single forking daemon capable of writing a pid
#                    file.  To get other behavoirs, implemend
#                    do_start(), do_stop() or other functions to
#                    override the defaults in /lib/init/init-d-script.
#                    Register your script by update-rc.d hsqldb defaults
### END INIT INFO

# Author: MPLB <mplescano@>
#

USER=mqm
CURRENT_DIR=/opt/mqm
DIR=$CURRENT_DIR
NAME=mq
DESC="MQ Server"
DAEMON=none
MQ_QMGR_NAME=IIB_MQMGR
CMD_MQ="$CURRENT_DIR/bin/strmqm ${MQ_QMGR_NAME}"
stdout_log="/var/log/$NAME.log"
stderr_log="/var/log/$NAME.err"

PATH=$PATH:$CURRENT_DIR/bin

get_pid() {
    cat "${PIDFILE}"
}

is_running() {
    [ -f "${PIDFILE}" ] && ps axf | grep -v grep | grep /opt/mqm/bin > /dev/null 2>&1
}

# Return
#   0 if daemon has been started
#   1 if daemon was already running
#   2 if daemon could not be started
do_start_cmd() {
    if is_running; then
        echo "It was already Running"
        return 1
    else
        cd "$DIR"
        . $CURRENT_DIR/bin/setmqenv -s
        echo "----------------------------------------"
        dspmqver
        echo "----------------------------------------"
        QMGR_EXISTS=`dspmq | grep ${MQ_QMGR_NAME} > /dev/null ; echo $?`
        if [ ${QMGR_EXISTS} -ne 0 ]; then
            /opt/mqm/setup-var-mqm.sh
            echo "Checking filesystem..."
            sudo -u $USER $CURRENT_DIR/bin/amqmfsck /var/mqm
            echo "----https://hub.jazz.net/code/edit/edit.html#/code/file/paj-OrionContent/paj%2520%257C%2520IIB-MQ-DB2/iib_manage.sh------------------------------------"
            #MQ_DEV=${MQ_DEV:-"true"}
            #if [ "${MQ_DEV}" -eq "true" ]; then
            # Turns on early adopt if we're using Developer defaults
                export AMQ_EXTRA_QM_STANZAS=Channels:ChlauthEarlyAdopt=Y
            #fi
            sudo -u "$USER" ${CURRENT_DIR}/bin/crtmqm -q ${MQ_QMGR_NAME} || true
            #if [ ${MQ_QMGR_CMDLEVEL+x} ]; then
                # Enables the specified command level, then stops the queue manager
            #    strmqm -e CMDLEVEL=${MQ_QMGR_CMDLEVEL} || true
            #fi
            echo "----------------------------------------"
            
            sudo -u "$USER" $CURRENT_DIR/bin/strmqm ${MQ_QMGR_NAME}
            
            # Turn off script failing here because of listeners failing the script
            set +e
            for MQSC_FILE in $(ls -v /opt/mqm/*.mqsc); do
                sudo -u "$USER" $CURRENT_DIR/bin/runmqsc ${MQ_QMGR_NAME} < ${MQSC_FILE}
            done
            set -e
            
            sudo -u "$USER" $CURRENT_DIR/bin/endmqm ${MQ_QMGR_NAME}
            
            sleep 20
        fi

        #if [ -z "$USER" ]; then
        #    sudo $CMD_MQ >> "$stdout_log" 2>> "$stderr_log" &
        #else
            sudo -u "$USER" $CMD_MQ >> "$stdout_log" 2>> "$stderr_log" &
            sleep 2
        #fi
        echo $! > "${PIDFILE}"
        if ! is_running; then
            return 2
        fi
        return 0
    fi
}

# Return
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
do_stop_cmd() {
    if is_running; then
        #kill -HUP `get_pid`
        sudo -u "$USER" $CURRENT_DIR/bin/endmqm ${MQ_QMGR_NAME}
        for i in 1 2 3 4 5 6 7 8 9 10
        # for i in `seq 10`
        do
            if ! is_running; then
                break
            fi
            echo -n "."
            sleep 1
        done
        echo

        if is_running; then
            return 2
        else
            if [ -f "${PIDFILE}" ]; then
                rm -f "${PIDFILE}"
            fi
            return 0
        fi
    else
        if [ -f "${PIDFILE}" ]; then
            rm -f "${PIDFILE}"
        fi
        return 1
    fi
}

do_status() {
    if [ -f "${PIDFILE}" ]; then
        PID=`cat ${PIDFILE}`
        #ps axf
        if [ -z "`ps -p ${PID} | grep ${PID} | grep -v grep`" ]; then
            printf "%s\n" "Process dead but pidfile exists"
            return 1
        else
            echo "Running"
            return 0
        fi
    else
        echo "Stopped"
        return 1
    fi
}
